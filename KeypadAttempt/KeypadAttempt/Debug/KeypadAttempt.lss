
KeypadAttempt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000057e  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000164f  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b23  00000000  00000000  00001d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000073a  00000000  00000000  0000285a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00002f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000578  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bd3  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000041cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e7       	ldi	r30, 0x7E	; 126
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 32       	cpi	r26, 0x26	; 38
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 21 02 	call	0x442	; 0x442 <main>
  da:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <lcd_write>:
    _delay_us(80);                                  // 40uS delay (min)
}

void lcd_write(unsigned char theByte)
{
	LCD_PORT &= ~(1<<LCD_BIT_D7);                        // assume that data is '0'
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	97 7f       	andi	r25, 0xF7	; 247
  e6:	95 b9       	out	0x05, r25	; 5
    if (theByte & 1<<7) LCD_PORT |= (1<<LCD_BIT_D7);     // make data = '1' if necessary
  e8:	88 23       	and	r24, r24
  ea:	1c f4       	brge	.+6      	; 0xf2 <lcd_write+0x10>
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	98 60       	ori	r25, 0x08	; 8
  f0:	95 b9       	out	0x05, r25	; 5

    LCD_PORT &= ~(1<<LCD_BIT_D6);                        // repeat for each data bit
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	9b 7f       	andi	r25, 0xFB	; 251
  f6:	95 b9       	out	0x05, r25	; 5
    if (theByte & 1<<6) LCD_PORT |= (1<<LCD_BIT_D6);
  f8:	86 ff       	sbrs	r24, 6
  fa:	03 c0       	rjmp	.+6      	; 0x102 <lcd_write+0x20>
  fc:	95 b1       	in	r25, 0x05	; 5
  fe:	94 60       	ori	r25, 0x04	; 4
 100:	95 b9       	out	0x05, r25	; 5

    LCD_PORT &= ~(1<<LCD_BIT_D5);
 102:	95 b1       	in	r25, 0x05	; 5
 104:	9d 7f       	andi	r25, 0xFD	; 253
 106:	95 b9       	out	0x05, r25	; 5
    if (theByte & 1<<5) LCD_PORT |= (1<<LCD_BIT_D5);
 108:	85 ff       	sbrs	r24, 5
 10a:	03 c0       	rjmp	.+6      	; 0x112 <lcd_write+0x30>
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	92 60       	ori	r25, 0x02	; 2
 110:	95 b9       	out	0x05, r25	; 5

    LCD_PORT &= ~(1<<LCD_BIT_D4);
 112:	95 b1       	in	r25, 0x05	; 5
 114:	9e 7f       	andi	r25, 0xFE	; 254
 116:	95 b9       	out	0x05, r25	; 5
    if (theByte & 1<<4) LCD_PORT |= (1<<LCD_BIT_D4);
 118:	84 ff       	sbrs	r24, 4
 11a:	03 c0       	rjmp	.+6      	; 0x122 <lcd_write+0x40>
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	85 b9       	out	0x05, r24	; 5

// write the data
                                                    // 'Address set-up time' (40 nS)
    LCD_PORT_EN |= (1<<LCD_BIT_EN);                   // Enable pin high
 122:	88 b1       	in	r24, 0x08	; 8
 124:	82 60       	ori	r24, 0x02	; 2
 126:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_write+0x48>
 12e:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    LCD_PORT_EN &= ~(1<<LCD_BIT_EN);                  // Enable pin low
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	88 b9       	out	0x08, r24	; 8
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_write+0x56>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <lcd_write_instruction>:
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}

void lcd_write_instruction(unsigned char Cmnd)
{
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
	LCD_PORT_RS &= ~(1<<LCD_BIT_RS);                // select the Instruction Register (RS low)
 144:	88 b1       	in	r24, 0x08	; 8
 146:	8e 7f       	andi	r24, 0xFE	; 254
 148:	88 b9       	out	0x08, r24	; 8
    LCD_PORT_EN &= ~(1<<LCD_BIT_EN);                  // make sure E is initially low
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	8d 7f       	andi	r24, 0xFD	; 253
 14e:	88 b9       	out	0x08, r24	; 8
    lcd_write(Cmnd);                    // write the upper 4-bits of the data
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
    lcd_write(Cmnd << 4);               // write the lower 4-bits of the data
 156:	8c 2f       	mov	r24, r28
 158:	82 95       	swap	r24
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_initialize>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	81 ee       	ldi	r24, 0xE1	; 225
 168:	94 e0       	ldi	r25, 0x04	; 4
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <lcd_initialize+0x6>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_initialize+0x10>
 174:	00 00       	nop

void lcd_initialize()
{
	_delay_ms(100);   
	// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    LCD_PORT_RS &= ~(1<<LCD_BIT_RS);                // select the Instruction Register (RS low)
 176:	88 b1       	in	r24, 0x08	; 8
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	88 b9       	out	0x08, r24	; 8
    LCD_PORT_EN &= ~(1<<LCD_BIT_EN);                  // make sure E is initially low
 17c:	88 b1       	in	r24, 0x08	; 8
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	88 b9       	out	0x08, r24	; 8
	// Reset the LCD controller
    lcd_write(LCD_functionReset);                 // first part of reset sequence
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	9c e9       	ldi	r25, 0x9C	; 156
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_initialize+0x28>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_initialize+0x2e>
 192:	00 00       	nop
    _delay_ms(10);                                  // 4.1 mS delay (min)
    lcd_write(LCD_functionReset);                 // second part of reset sequence
 194:	80 e3       	ldi	r24, 0x30	; 48
 196:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f e1       	ldi	r24, 0x1F	; 31
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_initialize+0x3a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_initialize+0x40>
 1a4:	00 00       	nop
    _delay_us(200);                                 // 100uS delay (min)
    lcd_write(LCD_functionReset);                 // third part of reset sequence
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
    //_delay_us(200);                                 // this delay is omitted in the data sheet
	lcd_write(LCD_functionSet4bit);               // set 4-bit mode
 1ac:	88 e2       	ldi	r24, 0x28	; 40
 1ae:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_initialize+0x52>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_initialize+0x58>
 1bc:	00 00       	nop
    _delay_us(80);                                  // 40uS delay (min)
	// Function Set instruction
    lcd_write_instruction(LCD_functionSet4bit);   // set mode, lines, and font
 1be:	88 e2       	ldi	r24, 0x28	; 40
 1c0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write_instruction>
 1c4:	8f e3       	ldi	r24, 0x3F	; 63
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_initialize+0x64>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_initialize+0x6a>
 1ce:	00 00       	nop
    _delay_us(80);                                  // 40uS delay (min)
	// Display On/Off Control instruction
    lcd_write_instruction(LCD_displayOff);        // turn display OFF
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write_instruction>
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_initialize+0x76>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <lcd_initialize+0x7c>
 1e0:	00 00       	nop
    _delay_us(80);                                  // 40uS delay (min)
	// Clear Display instruction
    lcd_write_instruction(LCD_Clear);             // clear display RAM
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	8f e7       	ldi	r24, 0x7F	; 127
 1ea:	9e e3       	ldi	r25, 0x3E	; 62
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_initialize+0x88>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_initialize+0x8e>
 1f2:	00 00       	nop
    _delay_ms(4);                                   // 1.64 mS delay (min)
	// ; Entry Mode Set instruction
    lcd_write_instruction(LCD_entryMode);         // set desired shift characteristics
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f e3       	ldi	r24, 0x3F	; 63
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_initialize+0x9a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_initialize+0xa0>
 204:	00 00       	nop
    _delay_us(80);                                  // 40uS delay (min)
	// Display On/Off Control instruction
    lcd_write_instruction(LCD_displayOn);         // turn the display ON
 206:	8e e0       	ldi	r24, 0x0E	; 14
 208:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write_instruction>
 20c:	8f e3       	ldi	r24, 0x3F	; 63
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_initialize+0xac>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_initialize+0xb2>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <lcd_write_data>:
    lcd_write(Cmnd);                    // write the upper 4-bits of the data
    lcd_write(Cmnd << 4);               // write the lower 4-bits of the data
}

void lcd_write_data(unsigned char theData)
{
 21a:	cf 93       	push	r28
 21c:	c8 2f       	mov	r28, r24
    LCD_PORT_RS |= (1<<LCD_BIT_RS);                 // select the Data Register (RS high)
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	81 60       	ori	r24, 0x01	; 1
 222:	88 b9       	out	0x08, r24	; 8
    LCD_PORT_EN &= ~(1<<LCD_BIT_EN);                  // make sure E is initially low
 224:	88 b1       	in	r24, 0x08	; 8
 226:	8d 7f       	andi	r24, 0xFD	; 253
 228:	88 b9       	out	0x08, r24	; 8
    lcd_write(theData);                           // write the upper 4-bits of the data
 22a:	8c 2f       	mov	r24, r28
 22c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
    lcd_write(theData << 4);                      // write the lower 4-bits of the data
 230:	8c 2f       	mov	r24, r28
 232:	82 95       	swap	r24
 234:	80 7f       	andi	r24, 0xF0	; 240
 236:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write>
}
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <lcd_print>:

void lcd_print(char * str)
{
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	8c 01       	movw	r16, r24
    unsigned char i = 0;                             // character counter
 246:	c0 e0       	ldi	r28, 0x00	; 0
    while (str[i] != 0)
 248:	09 c0       	rjmp	.+18     	; 0x25c <lcd_print+0x1e>
    {
        lcd_write_data(str[i]);
 24a:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_write_data>
        i++;
 24e:	cf 5f       	subi	r28, 0xFF	; 255
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_print+0x16>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_print+0x1c>
 25a:	00 00       	nop
}

void lcd_print(char * str)
{
    unsigned char i = 0;                             // character counter
    while (str[i] != 0)
 25c:	f8 01       	movw	r30, r16
 25e:	ec 0f       	add	r30, r28
 260:	f1 1d       	adc	r31, r1
 262:	80 81       	ld	r24, Z
 264:	81 11       	cpse	r24, r1
 266:	f1 cf       	rjmp	.-30     	; 0x24a <lcd_print+0xc>
    {
        lcd_write_data(str[i]);
        i++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <lcdGoToXY>:

void lcdGoToXY(unsigned char x, unsigned char y) // Column, Row
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <lcdGoToXY+0x6>
 276:	00 d0       	rcall	.+0      	; 0x278 <lcdGoToXY+0x8>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstAddr[] = {0x80, 0xC0, 0x94, 0xD4};	// Table 12-4, pg. 401 20 x 4 LCD
 27c:	90 e8       	ldi	r25, 0x80	; 128
 27e:	99 83       	std	Y+1, r25	; 0x01
 280:	90 ec       	ldi	r25, 0xC0	; 192
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	94 e9       	ldi	r25, 0x94	; 148
 286:	9b 83       	std	Y+3, r25	; 0x03
 288:	94 ed       	ldi	r25, 0xD4	; 212
 28a:	9c 83       	std	Y+4, r25	; 0x04
	lcd_write_instruction(firstAddr[y - 1] + x - 1);
 28c:	e6 2f       	mov	r30, r22
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	2c 0f       	add	r18, r28
 298:	3d 1f       	adc	r19, r29
 29a:	e2 0f       	add	r30, r18
 29c:	f3 1f       	adc	r31, r19
 29e:	90 81       	ld	r25, Z
 2a0:	89 0f       	add	r24, r25
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_write_instruction>
 2a8:	8f e8       	ldi	r24, 0x8F	; 143
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcdGoToXY+0x3c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <lcdGoToXY+0x42>
 2b2:	00 00       	nop
	_delay_us(100);
}
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <backSpace>:

void backSpace() 
{
	lcdGoToXY(7,1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	87 e0       	ldi	r24, 0x07	; 7
 2c6:	0e 94 38 01 	call	0x270	; 0x270 <lcdGoToXY>
	lcd_print("              ");
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_print>
	lcdGoToXY(7,1);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	0e 94 38 01 	call	0x270	; 0x270 <lcdGoToXY>
 2da:	08 95       	ret

000002dc <Keypad>:
}

uint8_t Keypad()
{
 2dc:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	8f e3       	ldi	r24, 0x3F	; 63
 2e0:	9c e9       	ldi	r25, 0x9C	; 156
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <Keypad+0x6>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <Keypad+0xc>
 2e8:	00 00       	nop
	_delay_ms(10);
	uint8_t keypress = 0;
	
	PORTD = 0b01110000; // ROW 1
 2ea:	80 e7       	ldi	r24, 0x70	; 112
 2ec:	8b b9       	out	0x0b, r24	; 11
 2ee:	ef e9       	ldi	r30, 0x9F	; 159
 2f0:	ff e0       	ldi	r31, 0x0F	; 15
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <Keypad+0x16>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <Keypad+0x1c>
 2f8:	00 00       	nop
	
	_delay_ms(1); 
	PORTD = 0b01110111;
 2fa:	87 e7       	ldi	r24, 0x77	; 119
 2fc:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b01110111)
 2fe:	89 b1       	in	r24, 0x09	; 9
 300:	87 37       	cpi	r24, 0x77	; 119
 302:	11 f0       	breq	.+4      	; 0x308 <Keypad+0x2c>
}

uint8_t Keypad()
{
	_delay_ms(10);
	uint8_t keypress = 0;
 304:	c0 e0       	ldi	r28, 0x00	; 0
 306:	01 c0       	rjmp	.+2      	; 0x30a <Keypad+0x2e>
	
	_delay_ms(1); 
	PORTD = 0b01110111;
	if(PIND == 0b01110111)
	{
		keypress = 1;
 308:	c1 e0       	ldi	r28, 0x01	; 1
 30a:	8f e9       	ldi	r24, 0x9F	; 159
 30c:	9f e0       	ldi	r25, 0x0F	; 15
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <Keypad+0x32>
 312:	00 c0       	rjmp	.+0      	; 0x314 <Keypad+0x38>
 314:	00 00       	nop
	}
	_delay_ms(1);
	PORTD = 0b01111011;
 316:	8b e7       	ldi	r24, 0x7B	; 123
 318:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b01111011)
 31a:	89 b1       	in	r24, 0x09	; 9
 31c:	8b 37       	cpi	r24, 0x7B	; 123
 31e:	09 f4       	brne	.+2      	; 0x322 <Keypad+0x46>
	{
		keypress = 2;
 320:	c2 e0       	ldi	r28, 0x02	; 2
 322:	ef e9       	ldi	r30, 0x9F	; 159
 324:	ff e0       	ldi	r31, 0x0F	; 15
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <Keypad+0x4a>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <Keypad+0x50>
 32c:	00 00       	nop
	}
	_delay_ms(1);
	PORTD = 0b01111101;
 32e:	8d e7       	ldi	r24, 0x7D	; 125
 330:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b01111101)
 332:	89 b1       	in	r24, 0x09	; 9
 334:	8d 37       	cpi	r24, 0x7D	; 125
 336:	09 f4       	brne	.+2      	; 0x33a <Keypad+0x5e>
	{
		keypress = 3;
 338:	c3 e0       	ldi	r28, 0x03	; 3
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <Keypad+0x62>
 342:	00 c0       	rjmp	.+0      	; 0x344 <Keypad+0x68>
 344:	00 00       	nop
	}
	_delay_ms(1);
	PORTD = 0b01111110;
 346:	8e e7       	ldi	r24, 0x7E	; 126
 348:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b01111110)
 34a:	89 b1       	in	r24, 0x09	; 9
 34c:	8e 37       	cpi	r24, 0x7E	; 126
 34e:	11 f4       	brne	.+4      	; 0x354 <Keypad+0x78>
	{
		backSpace();
 350:	0e 94 61 01 	call	0x2c2	; 0x2c2 <backSpace>
 354:	ef e9       	ldi	r30, 0x9F	; 159
 356:	ff e0       	ldi	r31, 0x0F	; 15
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <Keypad+0x7c>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <Keypad+0x82>
 35e:	00 00       	nop
	}
	_delay_ms(1);
	
	PORTD = 0b10110000; // ROW 2
 360:	80 eb       	ldi	r24, 0xB0	; 176
 362:	8b b9       	out	0x0b, r24	; 11
 364:	8f e3       	ldi	r24, 0x3F	; 63
 366:	9c e9       	ldi	r25, 0x9C	; 156
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <Keypad+0x8c>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <Keypad+0x92>
 36e:	00 00       	nop
	
	_delay_ms(10);
	PORTD = 0b10110111; 
 370:	87 eb       	ldi	r24, 0xB7	; 183
 372:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b10110111)
 374:	89 b1       	in	r24, 0x09	; 9
 376:	87 3b       	cpi	r24, 0xB7	; 183
 378:	09 f4       	brne	.+2      	; 0x37c <Keypad+0xa0>
	{
		keypress = 4;
 37a:	c4 e0       	ldi	r28, 0x04	; 4
 37c:	ef e3       	ldi	r30, 0x3F	; 63
 37e:	fc e9       	ldi	r31, 0x9C	; 156
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <Keypad+0xa4>
 384:	00 c0       	rjmp	.+0      	; 0x386 <Keypad+0xaa>
 386:	00 00       	nop
	}
	_delay_ms(10);
	PORTD = 0b10111011;
 388:	8b eb       	ldi	r24, 0xBB	; 187
 38a:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b10111011)
 38c:	89 b1       	in	r24, 0x09	; 9
 38e:	8b 3b       	cpi	r24, 0xBB	; 187
 390:	09 f4       	brne	.+2      	; 0x394 <Keypad+0xb8>
	{
		keypress = 5;
 392:	c5 e0       	ldi	r28, 0x05	; 5
 394:	8f e9       	ldi	r24, 0x9F	; 159
 396:	9f e0       	ldi	r25, 0x0F	; 15
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <Keypad+0xbc>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <Keypad+0xc2>
 39e:	00 00       	nop
	}
	_delay_ms(1);
	PORTD = 0b10111101;
 3a0:	8d eb       	ldi	r24, 0xBD	; 189
 3a2:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b10111101)
 3a4:	89 b1       	in	r24, 0x09	; 9
 3a6:	8d 3b       	cpi	r24, 0xBD	; 189
 3a8:	09 f4       	brne	.+2      	; 0x3ac <Keypad+0xd0>
	{
		keypress = 6;
 3aa:	c6 e0       	ldi	r28, 0x06	; 6
 3ac:	ef e9       	ldi	r30, 0x9F	; 159
 3ae:	ff e0       	ldi	r31, 0x0F	; 15
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <Keypad+0xd4>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <Keypad+0xda>
 3b6:	00 00       	nop
	}
	_delay_ms(1);
	
	PORTD = 0b11010111; // ROW 3
 3b8:	87 ed       	ldi	r24, 0xD7	; 215
 3ba:	8b b9       	out	0x0b, r24	; 11
 3bc:	ef e3       	ldi	r30, 0x3F	; 63
 3be:	fc e9       	ldi	r31, 0x9C	; 156
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <Keypad+0xe4>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <Keypad+0xea>
 3c6:	00 00       	nop
	
	_delay_ms(10);
	PORTD = 0b11010111; 
 3c8:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b11010111)
 3ca:	89 b1       	in	r24, 0x09	; 9
 3cc:	87 3d       	cpi	r24, 0xD7	; 215
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <Keypad+0xf6>
	{
		keypress = 7;
 3d0:	c7 e0       	ldi	r28, 0x07	; 7
 3d2:	8f e9       	ldi	r24, 0x9F	; 159
 3d4:	9f e0       	ldi	r25, 0x0F	; 15
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <Keypad+0xfa>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <Keypad+0x100>
 3dc:	00 00       	nop
	}
	_delay_ms(1);
	PORTD = 0b11011011;
 3de:	8b ed       	ldi	r24, 0xDB	; 219
 3e0:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b11011011)
 3e2:	89 b1       	in	r24, 0x09	; 9
 3e4:	8b 3d       	cpi	r24, 0xDB	; 219
 3e6:	09 f4       	brne	.+2      	; 0x3ea <Keypad+0x10e>
	{
		keypress = 8;
 3e8:	c8 e0       	ldi	r28, 0x08	; 8
 3ea:	ef e3       	ldi	r30, 0x3F	; 63
 3ec:	fc e9       	ldi	r31, 0x9C	; 156
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <Keypad+0x112>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <Keypad+0x118>
 3f4:	00 00       	nop
	}
	_delay_ms(10);
	PORTD = 0b11011101;
 3f6:	8d ed       	ldi	r24, 0xDD	; 221
 3f8:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b11011101)
 3fa:	89 b1       	in	r24, 0x09	; 9
 3fc:	8d 3d       	cpi	r24, 0xDD	; 221
 3fe:	09 f4       	brne	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	{
		keypress = 9;
 400:	c9 e0       	ldi	r28, 0x09	; 9
 402:	8f e9       	ldi	r24, 0x9F	; 159
 404:	9f e0       	ldi	r25, 0x0F	; 15
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
	}
	_delay_ms(1);
	
	PORTD = 0b11100000; // ROW 4
 40e:	80 ee       	ldi	r24, 0xE0	; 224
 410:	8b b9       	out	0x0b, r24	; 11
 412:	ef e3       	ldi	r30, 0x3F	; 63
 414:	fc e9       	ldi	r31, 0x9C	; 156
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
	
	_delay_ms(10);
	PORTD = 0b11101011; // CANT RETURN 0, CHECK MAIN
 41e:	8b ee       	ldi	r24, 0xEB	; 235
 420:	8b b9       	out	0x0b, r24	; 11
	if(PIND == 0b11101011)
 422:	89 b1       	in	r24, 0x09	; 9
 424:	8b 3e       	cpi	r24, 0xEB	; 235
 426:	21 f4       	brne	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		lcd_print("0"); // Either single, double, or randomly appears
 428:	8f e0       	ldi	r24, 0x0F	; 15
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_print>
 430:	8f e3       	ldi	r24, 0x3F	; 63
 432:	9c e9       	ldi	r25, 0x9C	; 156
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
						// Bug due to the way program prints keypress var
						// "if(button != 0) "
	}
	_delay_ms(10);
	return keypress;
}
 43c:	8c 2f       	mov	r24, r28
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <main>:
///////////////////////////////////////////////////////////////////////////////////////////
//--------------Beginning of Main Code---------------------------------------------------//
///////////////////////////////////////////////////////////////////////////////////////////

int main()
{
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	28 97       	sbiw	r28, 0x08	; 8
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
	
	// configure the microprocessor pins for the data lines
    LCD_DDR |= (1<<LCD_BIT_D7);                  // 4 data lines - output
 456:	84 b1       	in	r24, 0x04	; 4
 458:	88 60       	ori	r24, 0x08	; 8
 45a:	84 b9       	out	0x04, r24	; 4
    LCD_DDR |= (1<<LCD_BIT_D6);
 45c:	84 b1       	in	r24, 0x04	; 4
 45e:	84 60       	ori	r24, 0x04	; 4
 460:	84 b9       	out	0x04, r24	; 4
    LCD_DDR |= (1<<LCD_BIT_D5);
 462:	84 b1       	in	r24, 0x04	; 4
 464:	82 60       	ori	r24, 0x02	; 2
 466:	84 b9       	out	0x04, r24	; 4
    LCD_DDR |= (1<<LCD_BIT_D4);
 468:	84 b1       	in	r24, 0x04	; 4
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	84 b9       	out	0x04, r24	; 4
	
	// configure the microprocessor pins for the control lines
    LCD_DDR_EN |= (1<<LCD_BIT_EN);                    // E line - output
 46e:	87 b1       	in	r24, 0x07	; 7
 470:	82 60       	ori	r24, 0x02	; 2
 472:	87 b9       	out	0x07, r24	; 7
    LCD_DDR_RS |= (1<<LCD_BIT_RS);                    // RS line - output
 474:	87 b1       	in	r24, 0x07	; 7
 476:	81 60       	ori	r24, 0x01	; 1
 478:	87 b9       	out	0x07, r24	; 7

	lcd_initialize();                                 // initialize the LCD display for a 4-bit interface
 47a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_initialize>
	
	lcd_print("F(HZ):"); 							  // display the first line of information
 47e:	81 e1       	ldi	r24, 0x11	; 17
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_print>
	lcdGoToXY(1,3);									  // set cursor to 3rd line
 486:	63 e0       	ldi	r22, 0x03	; 3
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 38 01 	call	0x270	; 0x270 <lcdGoToXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48e:	8f e3       	ldi	r24, 0x3F	; 63
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <main+0x50>
 496:	00 c0       	rjmp	.+0      	; 0x498 <main+0x56>
 498:	00 00       	nop
	_delay_us(80);									  // 40 uS delay (min)                             			
	
	lcd_print("Current RPM:");						  // display the 3rd line of information
 49a:	88 e1       	ldi	r24, 0x18	; 24
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_print>
 4a2:	8f e3       	ldi	r24, 0x3F	; 63
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <main+0x64>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <main+0x6a>
 4ac:	00 00       	nop
	_delay_us(80);	
	lcdGoToXY(7,1);									  // set cursor after "F(HZ):"
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	87 e0       	ldi	r24, 0x07	; 7
 4b2:	0e 94 38 01 	call	0x270	; 0x270 <lcdGoToXY>

	DDRD = 0xF0; // column pins are input, row pins are output
 4b6:	80 ef       	ldi	r24, 0xF0	; 240
 4b8:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ba:	8f e9       	ldi	r24, 0x9F	; 159
 4bc:	9f e0       	ldi	r25, 0x0F	; 15
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <main+0x7c>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x82>
 4c4:	00 00       	nop
	_delay_ms(1);
	PORTD = 0x0F; // enables pull-ups on PORTD
 4c6:	8f e0       	ldi	r24, 0x0F	; 15
 4c8:	8b b9       	out	0x0b, r24	; 11
 4ca:	8f e9       	ldi	r24, 0x9F	; 159
 4cc:	9f e0       	ldi	r25, 0x0F	; 15
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <main+0x8c>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <main+0x92>
 4d4:	00 00       	nop
	while(1)
	{	
		char show[8];
		while(1)
		{
			button = Keypad();
 4d6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Keypad>
			if(button != 0) 
 4da:	88 23       	and	r24, r24
 4dc:	79 f0       	breq	.+30     	; 0x4fc <main+0xba>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4de:	4a e0       	ldi	r20, 0x0A	; 10
 4e0:	be 01       	movw	r22, r28
 4e2:	6f 5f       	subi	r22, 0xFF	; 255
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 88 02 	call	0x510	; 0x510 <__itoa_ncheck>
			{
				itoa(button,show,10);
				lcd_print(show);
 4ec:	ce 01       	movw	r24, r28
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_print>
				//location++;
				while(Keypad()!=0);
 4f4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Keypad>
 4f8:	81 11       	cpse	r24, r1
 4fa:	fc cf       	rjmp	.-8      	; 0x4f4 <main+0xb2>
 4fc:	9f ef       	ldi	r25, 0xFF	; 255
 4fe:	29 ef       	ldi	r18, 0xF9	; 249
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	91 50       	subi	r25, 0x01	; 1
 504:	20 40       	sbci	r18, 0x00	; 0
 506:	80 40       	sbci	r24, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <main+0xc0>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <main+0xca>
 50c:	00 00       	nop
 50e:	e3 cf       	rjmp	.-58     	; 0x4d6 <main+0x94>

00000510 <__itoa_ncheck>:
 510:	bb 27       	eor	r27, r27
 512:	4a 30       	cpi	r20, 0x0A	; 10
 514:	31 f4       	brne	.+12     	; 0x522 <__itoa_ncheck+0x12>
 516:	99 23       	and	r25, r25
 518:	22 f4       	brpl	.+8      	; 0x522 <__itoa_ncheck+0x12>
 51a:	bd e2       	ldi	r27, 0x2D	; 45
 51c:	90 95       	com	r25
 51e:	81 95       	neg	r24
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	0c 94 94 02 	jmp	0x528	; 0x528 <__utoa_common>

00000526 <__utoa_ncheck>:
 526:	bb 27       	eor	r27, r27

00000528 <__utoa_common>:
 528:	fb 01       	movw	r30, r22
 52a:	55 27       	eor	r21, r21
 52c:	aa 27       	eor	r26, r26
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	aa 1f       	adc	r26, r26
 534:	a4 17       	cp	r26, r20
 536:	10 f0       	brcs	.+4      	; 0x53c <__utoa_common+0x14>
 538:	a4 1b       	sub	r26, r20
 53a:	83 95       	inc	r24
 53c:	50 51       	subi	r21, 0x10	; 16
 53e:	b9 f7       	brne	.-18     	; 0x52e <__utoa_common+0x6>
 540:	a0 5d       	subi	r26, 0xD0	; 208
 542:	aa 33       	cpi	r26, 0x3A	; 58
 544:	08 f0       	brcs	.+2      	; 0x548 <__utoa_common+0x20>
 546:	a9 5d       	subi	r26, 0xD9	; 217
 548:	a1 93       	st	Z+, r26
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	79 f7       	brne	.-34     	; 0x52c <__utoa_common+0x4>
 54e:	b1 11       	cpse	r27, r1
 550:	b1 93       	st	Z+, r27
 552:	11 92       	st	Z+, r1
 554:	cb 01       	movw	r24, r22
 556:	0c 94 ad 02 	jmp	0x55a	; 0x55a <strrev>

0000055a <strrev>:
 55a:	dc 01       	movw	r26, r24
 55c:	fc 01       	movw	r30, r24
 55e:	67 2f       	mov	r22, r23
 560:	71 91       	ld	r23, Z+
 562:	77 23       	and	r23, r23
 564:	e1 f7       	brne	.-8      	; 0x55e <strrev+0x4>
 566:	32 97       	sbiw	r30, 0x02	; 2
 568:	04 c0       	rjmp	.+8      	; 0x572 <strrev+0x18>
 56a:	7c 91       	ld	r23, X
 56c:	6d 93       	st	X+, r22
 56e:	70 83       	st	Z, r23
 570:	62 91       	ld	r22, -Z
 572:	ae 17       	cp	r26, r30
 574:	bf 07       	cpc	r27, r31
 576:	c8 f3       	brcs	.-14     	; 0x56a <strrev+0x10>
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
